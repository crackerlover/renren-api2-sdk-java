/**
 * Autogenerated by renren-api2-generator 2013-11-21 17:47:04
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class CheckinService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public CheckinService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 签到回复列表
     * @param pageNo 页码
     * @param pageSize 页大小
     * @param checkinId 签到id
     * @return ReplyCheckin 签到回复
     * @throws   RennException 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     * PAGESIZE_NOT_IN_RANGE 页面大小不再1-100范围内 
     * PAGE_NUMBER_MUST_LARGER_0 页码必需大于0 
     */
    public ReplyCheckin [] listCheckinReply (Integer  pageNo, Integer  pageSize, Long  checkinId) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (pageNo != null) {
            textParams.put("pageNo", RennParam.asString(pageNo));
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (checkinId != null) {
            textParams.put("checkinId", RennParam.asString(checkinId));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/checkin/reply/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (ReplyCheckin [])mapper.mapCommon(response.getResponse().toString(), ReplyCheckin.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 用户进行签到
     * @param content 签到内容
     * @param placeId 地点id
     * @return Long 成功时ugcid签到结果 -1=操作被拒绝，-2=含敏感信息，-3=操作太快
     * @throws   RennException 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     * OPERATE_TOO_FAST 操作太快 
     * INVALID_CONTENT 包含敏感词 
     * OPERATION_DENY 操作被拒绝 
     * CONTENT_LENGTH_OVER_240 内容长度超过240 
     */
    public Long putCheckin (String  content, String  placeId) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (content != null) {
	    textParams.put("content", content);
        }
        if (placeId != null) {
	    textParams.put("placeId", placeId);
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/checkin/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Long)mapper.mapCommon(response.getResponse().toString(), Long.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 获取签到信息
     * @param checkinId 签到id
     * @return PoiCheckin 签到详情
     * @throws   RennException 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     */
    public PoiCheckin getCheckin (Long  checkinId) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (checkinId != null) {
            textParams.put("checkinId", RennParam.asString(checkinId));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/checkin/get", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (PoiCheckin)mapper.mapCommon(response.getResponse().toString(), PoiCheckin.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 获取签到列表
     * @param pageNo 页码
     * @param pageSize 页大小
     * @return LocationFeed 地点新鲜事
     * @throws   RennException 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     * PAGESIZE_NOT_IN_RANGE 页面大小不再1-100范围内 
     * PAGE_NUMBER_MUST_LARGER_0 页码必需大于0 
     */
    public LocationFeed [] listCheckin (Integer  pageNo, Integer  pageSize) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (pageNo != null) {
            textParams.put("pageNo", RennParam.asString(pageNo));
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/checkin/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (LocationFeed [])mapper.mapCommon(response.getResponse().toString(), LocationFeed.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 签到回复
     * @param content 回复内容
     * @param reId 回复哪个用户
     * @param checkinId 签到id
     * @return ReplyCheckinResponse 回复签到结果
     * @throws   RennException 
     * PRIVACY_DENY 对方隐私拒绝此操作 
     * REPLY_USER_INVALID 回复对象非法 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     * INVALID_CONTENT 内容包含敏感词 
     * CHECKIN_ID_INVALID 签到ID不存在或已删除 
     * CONTENT_LENGTH_OVER_140 内容长度超过140 
     * INVALID_REPLY_SELF 不能回复自己 
     * ARGUMENT_UNCOMPLETE 参数不完整 
     * REPLY_FAIL 回复失败 
     * POST_SAME_CONTENT 回复相同内容 
     * CONTENT_CAN_NOT_BE_EMPTY 回复内容不能为空 
     * REPLY_USER_NOT_IN_LIST 回复对象不在回复列表中 
     */
    public ReplyCheckinResponse putCheckinReply (String  content, Long  reId, Long  checkinId) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (content != null) {
	    textParams.put("content", content);
        }
        if (reId != null) {
            textParams.put("reId", RennParam.asString(reId));
        }
        if (checkinId != null) {
            textParams.put("checkinId", RennParam.asString(checkinId));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/checkin/reply/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (ReplyCheckinResponse)mapper.mapCommon(response.getResponse().toString(), ReplyCheckinResponse.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
