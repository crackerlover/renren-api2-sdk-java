/**
 * Autogenerated by renren-api2-generator 2013-11-21 17:47:04
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class NewsService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public NewsService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 清除当前用户消息
     * @param newsType 消息类型
     * @return Integer 成功返回1失败返回0
     * @throws   RennException 
     * INVALID_NEWS_TYPE_ALL 不支持ALL类型 
     * INVALID_NEWS_TYPE_NULL NewsType不能为空 
     */
    public Integer clearNewsCount (NewsType  newsType) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (newsType != null) {
            textParams.put("newsType", RennParam.asString(newsType));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/news/count/clear", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Integer)mapper.mapCommon(response.getResponse().toString(), Integer.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 获取当前用户的各种消息数。
     * @param newsTypes 消息类型,默认为ALL
     * @return NewsCounts 消息数
     * @throws   RennException 
     */
    public NewsCounts getNewsCounts (NewsType [] newsTypes) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (newsTypes != null) {
            textParams.put("newsTypes", RennParam.asString(newsTypes));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/news/counts/get", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (NewsCounts)mapper.mapCommon(response.getResponse().toString(), NewsCounts.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
