/**
 * Autogenerated by renren-api2-generator 2013-11-21 17:47:04
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class CommercialService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public CommercialService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 查询附近的商业活动
     * @param poiType 地点分类。参数值包括："美食"，"娱乐"，"生活"，"购物"，"运动"，"酒店"，"其他"，取全部分类时传空即可；示例：
         poiType=美食
     * @param pageNo 页码 取值大于0
     * @param pageSize 页大小 大小在1-100之间，建议取较小值，否则超时率容易增加
     * @param radius 半径 范围在1-5公里
     * @param longitude 
     * @param eventType 活动的类型，缺省值为44。eventType=1优惠券；eventType=2团购；eventType=3活动；eventType=44 全部
     * @param latitude 
     * @param excludeList 是否返回列表。1为不返回列表 只返回总数，0为返回列表
     * @return PoiEventLatLonBizInfoResponse 根据经纬度返回的附近活动列表
     * @throws   RennException 
     * PAGE_NUMBER_MUST_LARGER_0 页码必须大于0 
     * LATITUDE_NOT_IN_RANGE 纬度不在-90-90范围内 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     * RADIUS_NOT_IN_RANGE 半径不在1-5公里范围内 
     * PAGESIZE_NOT_IN_RANGE 页面大小不在1-100范围内 
     * INVALID_EXCLUDELIST 是否只返回数量只能为0或1 
     * LONGITUDE_NOT_IN_RANGE 经度不在-180-180范围内 
     */
    public PoiEventLatLonBizInfoResponse listCommercialEvent (String  poiType, Integer  pageNo, Integer  pageSize, Double  radius, Double  longitude, Integer  eventType, Double  latitude, Integer  excludeList) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (poiType != null) {
	    textParams.put("poiType", poiType);
        }
        if (pageNo != null) {
            textParams.put("pageNo", RennParam.asString(pageNo));
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (radius != null) {
            textParams.put("radius", RennParam.asString(radius));
        }
        if (longitude != null) {
            textParams.put("longitude", RennParam.asString(longitude));
        }
        if (eventType != null) {
            textParams.put("eventType", RennParam.asString(eventType));
        }
        if (latitude != null) {
            textParams.put("latitude", RennParam.asString(latitude));
        }
        if (excludeList != null) {
            textParams.put("excludeList", RennParam.asString(excludeList));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/commercial/event/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (PoiEventLatLonBizInfoResponse)mapper.mapCommon(response.getResponse().toString(), PoiEventLatLonBizInfoResponse.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 商业信息辅助查询接口
     * @return PlaceCityInfoResponse 城市信息用于查询
     * @throws   RennException 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     */
    public PlaceCityInfoResponse [] searchCommercial () throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/commercial/search", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (PlaceCityInfoResponse [])mapper.mapCommon(response.getResponse().toString(), PlaceCityInfoResponse.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 获取商业信息
     * @param limit 一次取的信息条数
     * @param cityCode 城市代码
     * @param from 调用来源 0=web 1=wap 2=mobile
     * @param eventType eventType 活动的类型，缺省值为44。eventType=1优惠券；eventType=2团购；eventType=3活动；eventType=44 全部
     * @param offset 偏移
     * @param nearPromotion 是否在周边推广
     * @return PlaceCommercialInfosResponse 地点商业信息
     * @throws   RennException 
     * EVENT_TYPE_MUST_LARGER_THAN_0 eventType必须大于0 
     * INVALID_FROM 来源非法，必须为0，1，2中的一个 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     * OPERATE_TOO_FAST 操作太快 
     * INVALID_PAGE_NUMBER 页码必须大于0 
     * INVALID_NEARPROMOTION NEARPROMOTION值非法只能为0或1 
     * INVALID_PAGE_SIZE 页大小不在0-100之间 
     */
    public PlaceCommercialInfosResponse getCommercial (Integer  limit, String  cityCode, Integer  from, Integer  eventType, Integer  offset, Integer  nearPromotion) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (limit != null) {
            textParams.put("limit", RennParam.asString(limit));
        }
        if (cityCode != null) {
	    textParams.put("cityCode", cityCode);
        }
        if (from != null) {
            textParams.put("from", RennParam.asString(from));
        }
        if (eventType != null) {
            textParams.put("eventType", RennParam.asString(eventType));
        }
        if (offset != null) {
            textParams.put("offset", RennParam.asString(offset));
        }
        if (nearPromotion != null) {
            textParams.put("nearPromotion", RennParam.asString(nearPromotion));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/commercial/get", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (PlaceCommercialInfosResponse)mapper.mapCommon(response.getResponse().toString(), PlaceCommercialInfosResponse.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
