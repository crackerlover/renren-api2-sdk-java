/**
 * Autogenerated by renren-api2-generator 2013-11-21 17:47:04
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class PlaceService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public PlaceService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 获取自己和好友的带lbs信息的feed列表
     * @param pageNo 页码
     * @param pageSize 页大小
     * @return LocationFeed 地点新鲜事
     * @throws   RennException 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     * PAGESIZE_NOT_IN_RANGE 页面大小不再1-100范围内 
     * PAGE_NUMBER_MUST_LARGER_0 页码必需大于0 
     */
    public LocationFeed [] listPlaceFriendFeed (Integer  pageNo, Integer  pageSize) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (pageNo != null) {
            textParams.put("pageNo", RennParam.asString(pageNo));
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/place/friend/feed/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (LocationFeed [])mapper.mapCommon(response.getResponse().toString(), LocationFeed.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 创建地点
     * @param address 地址
     * @param name 地点名称
     * @param longitude 经度
     * @param latitude 纬度
     * @return SavePoiResponse 签到结果
     * @throws   RennException 
     * SERVICE_UNAVALIALABLE 服务端临时不可用 
     * LATITUDE_NOT_IN_RANGE 页面大小不在1-100范围内 
     * LONGITUDE_NOT_IN_RANGE 经度不在-180-180范围内 
     */
    public SavePoiResponse putPlace (String  address, String  name, Double  longitude, Double  latitude) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (address != null) {
	    textParams.put("address", address);
        }
        if (name != null) {
	    textParams.put("name", name);
        }
        if (longitude != null) {
            textParams.put("longitude", RennParam.asString(longitude));
        }
        if (latitude != null) {
            textParams.put("latitude", RennParam.asString(latitude));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/place/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (SavePoiResponse)mapper.mapCommon(response.getResponse().toString(), SavePoiResponse.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
