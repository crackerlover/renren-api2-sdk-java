/**
 * Autogenerated by renren-api2-generator 2014-04-16 15:13:50
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class PhoneService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public PhoneService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 根据传入的手机号码获取是当前用户的好友的用户列表
     * @param contacts 姓名和经过加密的手机号码列表，姓名与手机号之间以"#"连接，如（张三#123456789），手机号使用/v2/rsakey/get获取的公钥进行RSA加密，并使用Base64编码
     * @return Phone 人人网用户手机号码信息
     * @throws   RennException 
     * KEY_HAS_EXPIRED 密钥已过期 
     * SERVICE_UNAVAILABLE 服务端临时不可用 
     * INVALID_ENCYPT_PARAM 无效的加密数据 
     * USER_NOT_EXIST 用户不存在 
     */
    public Phone [] batchPhoneFriend (String [] contacts) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (contacts != null) {
            textParams.put("contacts", RennParam.asString(contacts));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/phone/friend/batch", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Phone [])mapper.mapCommon(response.getResponse().toString(), Phone.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 获取指定当前用户好友中公开的手机号码,接口进行IP限制，调用前需提供服务器IP申请开通，同时返回的电话号码需要使用/v2/rsakey/get获取的公钥进行解密
     * @return Phone 人人网用户手机号码信息
     * @throws   RennException 
     * KEY_HAS_EXPIRED 密钥已过期 
     * SERVICE_UNAVAILABLE 服务端临时不可用 
     * USER_NOT_EXIST 用户不存在 
     */
    public Phone [] listPhoneFriend () throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/phone/friend/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Phone [])mapper.mapCommon(response.getResponse().toString(), Phone.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
