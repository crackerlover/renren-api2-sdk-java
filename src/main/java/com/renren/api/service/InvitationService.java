/**
 * Autogenerated by renren-api2-generator 2013-11-21 17:47:04
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class InvitationService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public InvitationService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 发送邀请
     * @param invitationType 邀请类别，默认为应用邀请
     * @param userId 被邀请用户id
     * @param img 图片链接
     * @param giftName 礼物名称,InvitationType为GIFT时有效，不能超过6个字符
     * @param url 应用的链接地址
     * @return Invitation 邀请信息
     * @throws   RennException 
     * NO_QUATO_TODAY 发送邀请或送礼物超过配额(1条/每用户/每天)。 
     * INVAILD_SENDER_ID 无效的发送者 
     * GIFT_RECEIVER_NOT_APP_FRIENDS 礼物接受者必须为发送者的应用好友 
     * GIFT_NAME_TOO_LONG 礼物名称不能超过6个字 
     * INVITE_RECEIVER_HAS_INSTALL_APP 邀请的用户已经安装应用 
     * GIFT_NAME_EMPTY 礼物名称不能为空 
     * INVAILD_RECEIVER_ID 无效的接受者 
     * APP_INVITE_RECEIVER_NOT_FRIENDS 应用邀请接受者必须为发送者好友 
     * GIFT_NAME_PROHIBITED 礼物名称含有违禁词 
     * URL_EMPTY url不能为空 
     */
    public Invitation putInvitation (InvitationType  invitationType, Long  userId, String  img, String  giftName, String  url) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (invitationType != null) {
            textParams.put("invitationType", RennParam.asString(invitationType));
        }
        if (userId != null) {
            textParams.put("userId", RennParam.asString(userId));
        }
        if (img != null) {
	    textParams.put("img", img);
        }
        if (giftName != null) {
	    textParams.put("giftName", giftName);
        }
        if (url != null) {
	    textParams.put("url", url);
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File[]> fileParams = new HashMap<String, File[]>();
        RennRequest request = new RennRequest("/v2/invitation/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Invitation)mapper.mapCommon(response.getResponse().toString(), Invitation.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
